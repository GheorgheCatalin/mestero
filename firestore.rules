 rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    // Allow authenticated users to READ basic profile docs (needed for chat, profiles)
    // Only the owner can WRITE their own user document
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    // Listings - anyone can read, only authenticated users can create/update their own
   	function isSignedIn() { return request.auth != null; }
		function isOwnerFromRequest() { return request.resource.data.providerId == request.auth.uid; }
		function isOwner(resource) { return resource.data.providerId == request.auth.uid; }
    function isOwnerOrUpdatingViews(resource, request) {
      return request.auth.uid == resource.data.providerId ||
             (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']));
    }

		match /listings/{listingId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId;
      allow update: if isSignedIn() && isOwnerOrUpdatingViews(resource, request);
      allow delete: if isSignedIn() && isOwner(resource);
    }

    // Booking requests - users can read/write their own bookings (as client or provider)
    match /booking_requests/{bookingId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.providerId
      );
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.clientId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.providerId
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.providerId
      );
    }

    // Reviews - users can read all reviews, write reviews for their own bookings
    match /reviews/{reviewId} {
      allow read: if true; // Public read for displaying reviews
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.clientId;
      allow update, delete: if request.auth != null &&
        request.auth.uid == resource.data.clientId;
    }

    // Conversations and messages
    function isAuthed() { return request.auth != null; }

    match /conversations/{cid} {
      // Query-safe: relies on document data (participants) and matches your query filter
      allow read: if isAuthed() && resource.data.participants.hasAny([request.auth.uid]);

      allow create: if isAuthed()
        && request.resource.data.participants.size() == 2
        && request.resource.data.participants.hasAny([request.auth.uid])
        && request.resource.data.keys().hasOnly([
          'participants','lastMessage','lastMessageAt','lastSenderId','unreadCounts','createdAt','updatedAt'
        ]);

      allow update: if isAuthed()
        && resource.data.participants.hasAny([request.auth.uid])
        && request.resource.data.participants == resource.data.participants;

      allow delete: if false;

      // Messages subcollection
      match /messages/{mid} {
        // Reference parent for a single conversationâ€™s messages
        allow read: if isAuthed()
          && get(/databases/$(database)/documents/conversations/$(cid)).data.participants.hasAny([request.auth.uid]);

        allow create: if isAuthed()
          && get(/databases/$(database)/documents/conversations/$(cid)).data.participants.hasAny([request.auth.uid])
          && request.resource.data.senderId == request.auth.uid
          && request.resource.data.keys().hasOnly(['senderId','text','createdAt','readBy']);

        allow update, delete: if false;
      }
    }

    // Default deny for any other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 