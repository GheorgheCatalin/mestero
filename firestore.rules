 rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection (dev and prod)
    // Demo mode: allow any authenticated user to update (for rating updates)
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Liberal for demo
    }
    
    // Production users collection
    match /prod_users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Liberal for demo
    }
    
    // Listings - anyone can read, only authenticated users can create/update their own
   	function isSignedIn() { return request.auth != null; }
		function isOwnerFromRequest() { return request.resource.data.providerId == request.auth.uid; }
		function isOwner(resource) { return resource.data.providerId == request.auth.uid; }
    function isOwnerOrUpdatingViews(resource, request) { 
      return request.auth.uid == resource.data.providerId || 
             (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']));
    }

		match /listings/{listingId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId;
      allow update: if request.auth != null; // Liberal for demo - allow rating updates
      allow delete: if isSignedIn() && isOwner(resource);
    }
    
    // Production listings collection
    match /prod_listings/{listingId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId;
      allow update: if request.auth != null; // Liberal for demo - allow rating updates
      allow delete: if isSignedIn() && isOwner(resource);
    }

    // Booking requests - users can read/write their own bookings (as client or provider)
    match /booking_requests/{bookingId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.providerId
      );
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.clientId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.providerId
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.providerId
      );
    }
    
    // Production booking requests collection
    match /prod_booking_requests/{bookingId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.providerId
      );
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.clientId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.providerId
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.providerId
      );
    }

    // Reviews - users can read all reviews, write reviews for their own bookings
    match /reviews/{reviewId} {
      allow read: if true; // Public read for displaying reviews
      allow create: if request.auth != null; // Any authenticated user can create reviews (demo mode)
      allow update, delete: if request.auth != null && 
        resource.data.clientId == request.auth.uid;
    }
    
    // Production reviews collection
    match /prod_reviews/{reviewId} {
      allow read: if true; // Public read for displaying reviews
      allow create: if request.auth != null; // Any authenticated user can create reviews (demo mode)
      allow update, delete: if request.auth != null && 
        resource.data.clientId == request.auth.uid;
    }

    // Conversations and messages - Demo mode: liberal rules
    function isAuthed() { return request.auth != null; }

    match /conversations/{cid} {
      // Demo mode: allow authenticated users to read conversations
      allow read: if isAuthed();

      allow create: if isAuthed()
        && request.resource.data.participants.size() == 2
        && request.resource.data.participants.hasAny([request.auth.uid])
        && request.resource.data.keys().hasOnly([
          'participants','lastMessage','lastMessageAt','lastSenderId','unreadCounts','createdAt','updatedAt'
        ]);

      allow update: if isAuthed()
        && resource.data.participants.hasAny([request.auth.uid])
        && request.resource.data.participants == resource.data.participants;

      allow delete: if false;

      // Messages subcollection
      match /messages/{mid} {
        // Demo mode: allow authenticated users to read messages
        allow read: if isAuthed();

        allow create: if isAuthed()
          && get(/databases/$(database)/documents/conversations/$(cid)).data.participants.hasAny([request.auth.uid])
          && request.resource.data.senderId == request.auth.uid
          && request.resource.data.keys().hasOnly(['senderId','text','createdAt','readBy']);

        allow update, delete: if false;
      }
    }
    
    // Production conversations and messages
    match /prod_conversations/{cid} {
      // Demo mode: allow authenticated users to read conversations
      allow read: if isAuthed();

      allow create: if isAuthed()
        && request.resource.data.participants.size() == 2
        && request.resource.data.participants.hasAny([request.auth.uid])
        && request.resource.data.keys().hasOnly([
          'participants','lastMessage','lastMessageAt','lastSenderId','unreadCounts','createdAt','updatedAt'
        ]);

      allow update: if isAuthed()
        && resource.data.participants.hasAny([request.auth.uid])
        && request.resource.data.participants == resource.data.participants;

      allow delete: if false;

      // Messages subcollection
      match /messages/{mid} {
        // Demo mode: allow authenticated users to read messages
        allow read: if isAuthed();

        allow create: if isAuthed()
          && get(/databases/$(database)/documents/prod_conversations/$(cid)).data.participants.hasAny([request.auth.uid])
          && request.resource.data.senderId == request.auth.uid
          && request.resource.data.keys().hasOnly(['senderId','text','createdAt','readBy']);

        allow update, delete: if false;
      }
    }

    // Default deny for any other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 